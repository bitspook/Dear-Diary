#+AUTHOR: Charanjit Singh <ckhabra@gmail.com>

* Overview

App to help users write down their thoughts as a journal, and allow tagging entries for easy future retrieval.

** Objective

Main purpose of this app is to get users (developers) acquainted with Observable and how they can be used in real-world apps. This is achieved by introducing Observable as a control flow mechanism in React/Redux apps.

** Technologies used

This app will be/was built as a workshop project, so an effort is made to not use many libraries which might be foreign/new to some developers. Usage is limited to following technologies/libraries:

- ES 2015
- React v15.1.0
- React-router-redux
- Redux
- RxJS v5.0.0-beta.9
- Sass
- Webpack v2.1.0-beta.14

** Features to implement

- Create / edit / delete diary entries
- Add / edit / remove tags on diary entries
- Read diary entries by date
- Read diary entries by tag

** Features NOT to implement

- Offline storage
- Sync diary entries with Dropbox
- Encryption (encrypting entries before storing them in Dropbox)
- Tags for individual (user-selectable) sentences in diary entry
- Select multiple tags when browsing entries by tag
* Details
** Flow

- User lands on "Edit Entry" view with today's date selected.
- There is a vertical (fixed positioned) sidebar for navigation. Navigation has "New Entry" item selected by default on landing
- ~/~ redirect to ~/entry/YYYY-MM-DD~ where ~YYYY-MM-DD~ is today's date
- User can add/remove tags to an entry on "Edit Entry" view
- User can click on visible date in "Edit Entry" view to change to entry for another date
- User can click on "Browse" option in sidebar to browse all entries by tag; i.e user changes to "Browse Entries" view
** Models
*** Entry
- date :: moment
- body :: String
- tags :: [String]
** Main Layout

App has a single layout called "Main". All the views are rendered in the Main layout. Main layout consists of:

- A thin vertical fixed sidebar on left which has following options.
  Thin sidebar with icons for following options:

  * New Entry
    Opens "Edit Entry" view with today's date selected.

  * Browse Entries
    Opens "Browse Entries" view

- A content section which covers rest of the area. Content section changes per view.
** Views
*** Edit Entry

*Url :* ~/entries/<YYYY:MM:DD>~

Edit Entry view covers "New Entry", "Edit Entry" and "Read Entry" roles. This view consists of 3 vertically aligned parts in a single section:

- *Date*
  Date of the Entry being edited. Clicking on this opens a Calendar which allow switching date. Tags and Entry change accordingly on changing date.

- *Tags*
  A single row listing all the tags (or "No tags") current entryedit Tedalong with a transparently styled <input> at the end to add new tags. Each tag is shown in a label with a "X" icon to its right to remove the tag.

- *Entry*
  Textarea with no borders and styled like a normal page which spans to complete height of rest of the page.

**** Details
***** Props
- entry :: Entry
***** Selector
- Try to parse date in url params
  - If valid, try to get entry from state
    - If found, return the entry in props
    - If not found, create an empty entry and return it in props. Do not save it in state
  - If invalid, return an ~Error~ object as entry prop. Entry is invalid for following reasons
    - Unable to parse date in URL : When date in url is an invalid string
    - Cannot write diary entry for future : When date in url is in future
*** Browse Entries

*Url :* ~/entries?tags=<tag>~

Browse Entries view contains:

- List of all tags

  * All the tags are listed in a 20% wide vertical section right next to the navigation sidebar.
  * Tags are listed in alphabetical order
  * Each tag covers a new row.
  * Each row is clickable. Clicking a row make that tag active.
  * Active tag row is highlighted.
  * List contain a special first item called "All"
  * List of Entries is filtered by selected tag

  * Top of the list has a "Search" input. Typing this input filters the list of tags.

- List of Entries

  * Entries are listed in chronological order
  * Each entry is displayed as its date as header, a list of tags, and a 300 word excerpt from the body.
  * Clicking on the date opens the Edit Entry view with clicked date selected
** Components
*** Calendar

Calendar view that pops up when user click on date in "Edit Entry" view. Use [[https://github.com/clauderic/react-infinite-calendar][react-infinite-calendar]]
*** SelectList

List of selectable items with a search option. Used for "Filter by Tags" column in "Browse Entries" view
*** TagsRow
:PROPERTIES:
:ID:       41E370C2-4C5B-4FB9-82B9-053CD463C2A6
:END:
**** Props
- tags :: [String]
**** View
- List of [[id:D8759C56-3C58-4CB8-9499-E0DEED5C0052][Tag]]s
- Transparently styled <input>. On click:
  - If user has entered a valid string, check if duplicate, if not, emit ~ADD_TAG~ action on pressing Enter.
  - On pressing Esc or Enter with empty input or input is duplicate, <input> blurs
**** Actions emitted
- REMOVE_TAG (tag : String)
- ADD_TAG (tag : String)
**** Subcomponents
***** [[id:D8759C56-3C58-4CB8-9499-E0DEED5C0052][Tag]]
*** Tag
:PROPERTIES:
:ID:       D8759C56-3C58-4CB8-9499-E0DEED5C0052
:END:
**** Props
- tag :: String
**** View
- A label which shows the tag and have a ~X~ icon on the right which emits ~REMOVE~ action on click
**** Actions emitted
- REMOVE (tag : String)
